package com.seremis.geninfusion.soulentity

import java.util._
import java.{lang, util}

import com.seremis.geninfusion.api.lib.FunctionLib._
import com.seremis.geninfusion.api.soulentity.ISoulEntity
import com.seremis.geninfusion.api.util.TypedName
import com.seremis.geninfusion.soulentity.logic.MethodLogic
import net.minecraft.block._
import net.minecraft.block.material._
import net.minecraft.block.state._
import net.minecraft.command._
import net.minecraft.crash._
import net.minecraft.entity._
import net.minecraft.entity.ai._
import net.minecraft.entity.ai.attributes._
import net.minecraft.entity.effect._
import net.minecraft.entity.item._
import net.minecraft.entity.player._
import net.minecraft.inventory._
import net.minecraft.item._
import net.minecraft.nbt._
import net.minecraft.network.datasync._
import net.minecraft.pathfinding._
import net.minecraft.potion._
import net.minecraft.scoreboard._
import net.minecraft.server._
import net.minecraft.util._
import net.minecraft.util.math._
import net.minecraft.util.text._
import net.minecraft.util.text.event._
import net.minecraft.world._

trait EntityLivingMethodOverrides extends EntityLiving with ISoulEntity {

    var methodLogic = new MethodLogic(this)

    def callMethod[A](name: TypedName[A], superMethod: () => A, args: Any*): A = if(methodLogic != null) methodLogic.callMethod(name, superMethod, args) else superMethod() //methodLogic is null in super constructor call.

    override def addChatMessage(component: ITextComponent): Unit = callMethod(FuncEntityAddChatMessage, () => super.addChatMessage(component), component)
    override def addEntityCrashInfo(category: CrashReportCategory): Unit = callMethod(FuncEntityAddEntityCrashInfo, () => super.addEntityCrashInfo(category), category)
    override def addPassenger(passenger: Entity): Unit = callMethod(FuncEntityAddPassenger, () => super.addPassenger(passenger), passenger)
    override def addTag(tag: String): Boolean = callMethod(FuncEntityAddTag, () => super.addTag(tag), tag)
    override def addToPlayerScore(entityIn: Entity, amount: Int): Unit = callMethod(FuncEntityAddToPlayerScore, () => super.addToPlayerScore(entityIn, amount), entityIn, amount)
    override def addTrackingPlayer(player: EntityPlayerMP): Unit = callMethod(FuncEntityAddTrackingPlayer, () => super.addTrackingPlayer(player), player)
    override def addVelocity(x: Double, y: Double, z: Double): Unit = callMethod(FuncEntityAddVelocity, () => super.addVelocity(x, y, z), x, y, z)
    override def applyEnchantments(entityLivingBaseIn: EntityLivingBase, entityIn: Entity): Unit = callMethod(FuncEntityApplyEnchantments, () => super.applyEnchantments(entityLivingBaseIn, entityIn), entityLivingBaseIn, entityIn)
    override def applyEntityCollision(entityIn: Entity): Unit = callMethod(FuncEntityApplyEntityCollision, () => super.applyEntityCollision(entityIn), entityIn)
    override def applyOrientationToEntity(entityToUpdate: Entity): Unit = callMethod(FuncEntityApplyOrientationToEntity, () => super.applyOrientationToEntity(entityToUpdate), entityToUpdate)
    override def applyPlayerInteraction(player: EntityPlayer, vec: Vec3d, stack: ItemStack, hand: EnumHand): EnumActionResult = callMethod(FuncEntityApplyPlayerInteraction, () => super.applyPlayerInteraction(player, vec, stack, hand), player, vec, stack, hand)
    override def attackEntityFrom(source: DamageSource, amount: Float): Boolean = callMethod(FuncEntityAttackEntityFrom, () => super.attackEntityFrom(source, amount), source, amount)
    override def canAttackWithItem(): Boolean = callMethod(FuncEntityCanAttackWithItem, () => super.canAttackWithItem())
    override def canBeCollidedWith(): Boolean = callMethod(FuncEntityCanBeCollidedWith, () => super.canBeCollidedWith())
    override def canBePushed(): Boolean = callMethod(FuncEntityCanBePushed, () => super.canBePushed())
    override def canBeRidden(entityIn: Entity): Boolean = callMethod(FuncEntityCanBeRidden, () => super.canBeRidden(entityIn), entityIn)
    override def canCommandSenderUseCommand(permLevel: Int, commandName: String): Boolean = callMethod(FuncEntityCanCommandSenderUseCommand, () => super.canCommandSenderUseCommand(permLevel, commandName), permLevel, commandName)
    override def canFitPassenger(passenger: Entity): Boolean = callMethod(FuncEntityCanFitPassenger, () => super.canFitPassenger(passenger), passenger)
    override def canPassengerSteer(): Boolean = callMethod(FuncEntityCanPassengerSteer, () => super.canPassengerSteer())
    override def canRenderOnFire(): Boolean = callMethod(FuncEntityCanRenderOnFire, () => super.canRenderOnFire())
    override def canTriggerWalking(): Boolean = callMethod(FuncEntityCanTriggerWalking, () => super.canTriggerWalking())
    override def changeDimension(dimensionIn: Int): Entity = callMethod(FuncEntityChangeDimension, () => super.changeDimension(dimensionIn), dimensionIn)
    override def copyLocationAndAnglesFrom(entityIn: Entity): Unit = callMethod(FuncEntityCopyLocationAndAnglesFrom, () => super.copyLocationAndAnglesFrom(entityIn), entityIn)
    override def createRunningParticles(): Unit = callMethod(FuncEntityCreateRunningParticles, () => super.createRunningParticles())
    override def dealFireDamage(amount: Int): Unit = callMethod(FuncEntityDealFireDamage, () => super.dealFireDamage(amount), amount)
    override def decrementTimeUntilPortal(): Unit = callMethod(FuncEntityDecrementTimeUntilPortal, () => super.decrementTimeUntilPortal())
    override def dismountRidingEntity(): Unit = callMethod(FuncEntityDismountRidingEntity, () => super.dismountRidingEntity())
    override def doBlockCollisions(): Unit = callMethod(FuncEntityDoBlockCollisions, () => super.doBlockCollisions())
    override def doesEntityNotTriggerPressurePlate(): Boolean = callMethod(FuncEntityDoesEntityNotTriggerPressurePlate, () => super.doesEntityNotTriggerPressurePlate())
    override def dropItem(itemIn: Item, size: Int): EntityItem = callMethod(FuncEntityDropItem, () => super.dropItem(itemIn, size), itemIn, size)
    override def dropItemWithOffset(itemIn: Item, size: Int, offsetY: Float): EntityItem = callMethod(FuncEntityDropItemWithOffset, () => super.dropItemWithOffset(itemIn, size, offsetY), itemIn, size, offsetY)
    override def entityDropItem(stack: ItemStack, offsetY: Float): EntityItem = callMethod(FuncEntityEntityDropItem, () => super.entityDropItem(stack, offsetY), stack, offsetY)
    override def entityInit(): Unit = callMethod(FuncEntityEntityInit, () => super.entityInit())
    override def equals(p_equals_1_ : Any): Boolean = callMethod(FuncEntityEquals, () => super.equals(p_equals_1_), p_equals_1_)
    override def extinguish(): Unit = callMethod(FuncEntityExtinguish, () => super.extinguish())
    override def fall(distance: Float, damageMultiplier: Float): Unit = callMethod(FuncEntityFall, () => super.fall(distance, damageMultiplier), distance, damageMultiplier)
    override def getAdjustedHorizontalFacing(): EnumFacing = callMethod(FuncEntityGetAdjustedHorizontalFacing, () => super.getAdjustedHorizontalFacing())
    override def getAir(): Int = callMethod(FuncEntityGetAir, () => super.getAir())
    override def getAlwaysRenderNameTag(): Boolean = callMethod(FuncEntityGetAlwaysRenderNameTag, () => super.getAlwaysRenderNameTag())
    override def getAlwaysRenderNameTagForRender(): Boolean = callMethod(FuncEntityGetAlwaysRenderNameTagForRender, () => super.getAlwaysRenderNameTagForRender())
    override def getArmorInventoryList(): lang.Iterable[ItemStack] = callMethod(FuncEntityGetArmorInventoryList, () => super.getArmorInventoryList())
    override def getBrightness(partialTicks: Float): Float = callMethod(FuncEntityGetBrightness, () => super.getBrightness(partialTicks), partialTicks)
    override def getBrightnessForRender(partialTicks: Float): Int = callMethod(FuncEntityGetBrightnessForRender, () => super.getBrightnessForRender(partialTicks), partialTicks)
    override def getCollisionBorderSize(): Float = callMethod(FuncEntityGetCollisionBorderSize, () => super.getCollisionBorderSize())
    override def getCollisionBoundingBox(): AxisAlignedBB = callMethod(FuncEntityGetCollisionBoundingBox, () => super.getCollisionBoundingBox())
    override def getCollisionBox(entityIn: Entity): AxisAlignedBB = callMethod(FuncEntityGetCollisionBox, () => super.getCollisionBox(entityIn), entityIn)
    override def getCommandSenderEntity(): Entity = callMethod(FuncEntityGetCommandSenderEntity, () => super.getCommandSenderEntity())
    override def getCommandStats(): CommandResultStats = callMethod(FuncEntityGetCommandStats, () => super.getCommandStats())
    override def getControllingPassenger(): Entity = callMethod(FuncEntityGetControllingPassenger, () => super.getControllingPassenger())
    override def getCustomNameTag(): String = callMethod(FuncEntityGetCustomNameTag, () => super.getCustomNameTag())
    override def getDataManager(): EntityDataManager = callMethod(FuncEntityGetDataManager, () => super.getDataManager())
    override def getDisplayName(): ITextComponent = callMethod(FuncEntityGetDisplayName, () => super.getDisplayName())
    override def getDistance(x: Double, y: Double, z: Double): Double = callMethod(FuncEntityGetDistance, () => super.getDistance(x, y, z), x, y, z)
    override def getDistanceSq(x: Double, y: Double, z: Double): Double = callMethod(FuncEntityGetDistanceSq_0, () => super.getDistanceSq(x, y, z), x, y, z)
    override def getDistanceSq(pos: BlockPos): Double = callMethod(FuncEntityGetDistanceSq_1, () => super.getDistanceSq(pos), pos)
    override def getDistanceSqToCenter(pos: BlockPos): Double = callMethod(FuncEntityGetDistanceSqToCenter, () => super.getDistanceSqToCenter(pos), pos)
    override def getDistanceSqToEntity(entityIn: Entity): Double = callMethod(FuncEntityGetDistanceSqToEntity, () => super.getDistanceSqToEntity(entityIn), entityIn)
    override def getDistanceToEntity(entityIn: Entity): Float = callMethod(FuncEntityGetDistanceToEntity, () => super.getDistanceToEntity(entityIn), entityIn)
    override def getEntityBoundingBox(): AxisAlignedBB = callMethod(FuncEntityGetEntityBoundingBox, () => super.getEntityBoundingBox())
    override def getEntityId(): Int = callMethod(FuncEntityGetEntityId, () => super.getEntityId())
    methodLogic.addFinalMethod(FuncEntityGetEntityString, (args: Seq[Any]) => super.getEntityString())
    override def getEntityWorld(): World = callMethod(FuncEntityGetEntityWorld, () => super.getEntityWorld())
    override def getEquipmentAndArmor(): lang.Iterable[ItemStack] = callMethod(FuncEntityGetEquipmentAndArmor, () => super.getEquipmentAndArmor())
    override def getExplosionResistance(explosionIn: Explosion, worldIn: World, pos: BlockPos, blockStateIn: IBlockState): Float = callMethod(FuncEntityGetExplosionResistance, () => super.getExplosionResistance(explosionIn, worldIn, pos, blockStateIn), explosionIn, worldIn, pos, blockStateIn)
    override def getEyeHeight(): Float = callMethod(FuncEntityGetEyeHeight, () => super.getEyeHeight())
    override def getFlag(flag: Int): Boolean = callMethod(FuncEntityGetFlag, () => super.getFlag(flag), flag)
    override def getHeldEquipment(): lang.Iterable[ItemStack] = callMethod(FuncEntityGetHeldEquipment, () => super.getHeldEquipment())
    override def getHorizontalFacing(): EnumFacing = callMethod(FuncEntityGetHorizontalFacing, () => super.getHorizontalFacing())
    override def getHoverEvent(): HoverEvent = callMethod(FuncEntityGetHoverEvent, () => super.getHoverEvent())
    override def getLastPortalVec(): Vec3d = callMethod(FuncEntityGetLastPortalVec, () => super.getLastPortalVec())
    override def getLook(partialTicks: Float): Vec3d = callMethod(FuncEntityGetLook, () => super.getLook(partialTicks), partialTicks)
    override def getLookVec(): Vec3d = callMethod(FuncEntityGetLookVec, () => super.getLookVec())
    override def getLowestRidingEntity(): Entity = callMethod(FuncEntityGetLowestRidingEntity, () => super.getLowestRidingEntity())
    override def getMaxFallHeight(): Int = callMethod(FuncEntityGetMaxFallHeight, () => super.getMaxFallHeight())
    override def getMaxInPortalTime(): Int = callMethod(FuncEntityGetMaxInPortalTime, () => super.getMaxInPortalTime())
    override def getMirroredYaw(transformMirror: Mirror): Float = callMethod(FuncEntityGetMirroredYaw, () => super.getMirroredYaw(transformMirror), transformMirror)
    override def getMountedYOffset(): Double = callMethod(FuncEntityGetMountedYOffset, () => super.getMountedYOffset())
    override def getName(): String = callMethod(FuncEntityGetName, () => super.getName())
    override def getParts(): Array[Entity] = callMethod(FuncEntityGetParts, () => super.getParts())
    override def getPassengers(): List[Entity] = callMethod(FuncEntityGetPassengers, () => super.getPassengers())
    override def getPortalCooldown(): Int = callMethod(FuncEntityGetPortalCooldown, () => super.getPortalCooldown())
    override def getPosition(): BlockPos = callMethod(FuncEntityGetPosition, () => super.getPosition())
    override def getPositionEyes(partialTicks: Float): Vec3d = callMethod(FuncEntityGetPositionEyes, () => super.getPositionEyes(partialTicks), partialTicks)
    override def getPositionVector(): Vec3d = callMethod(FuncEntityGetPositionVector, () => super.getPositionVector())
    override def getPushReaction(): EnumPushReaction = callMethod(FuncEntityGetPushReaction, () => super.getPushReaction())
    override def getRecursivePassengers(): util.Collection[Entity] = callMethod(FuncEntityGetRecursivePassengers, () => super.getRecursivePassengers())
    override def getRecursivePassengersByType[T <: Entity](entityClass: Class[T]): util.Collection[T] = callMethod(FuncEntityGetRecursivePassengersByType_0, () => super.getRecursivePassengersByType(entityClass), entityClass).asInstanceOf[util.Collection[T]]
    override def getRenderBoundingBox(): AxisAlignedBB = callMethod(FuncEntityGetRenderBoundingBox, () => super.getRenderBoundingBox())
    override def getRidingEntity(): Entity = callMethod(FuncEntityGetRidingEntity, () => super.getRidingEntity())
    override def getRotatedYaw(transformRotation: Rotation): Float = callMethod(FuncEntityGetRotatedYaw, () => super.getRotatedYaw(transformRotation), transformRotation)
    override def getRotationYawHead(): Float = callMethod(FuncEntityGetRotationYawHead, () => super.getRotationYawHead())
    override def getServer(): MinecraftServer = callMethod(FuncEntityGetServer, () => super.getServer())
    override def getSoundCategory(): SoundCategory = callMethod(FuncEntityGetSoundCategory, () => super.getSoundCategory())
    override def getSplashSound(): SoundEvent = callMethod(FuncEntityGetSplashSound, () => super.getSplashSound())
    override def getSwimSound(): SoundEvent = callMethod(FuncEntityGetSwimSound, () => super.getSwimSound())
    override def getTags(): util.Set[String] = callMethod(FuncEntityGetTags, () => super.getTags())
    override def getTeam(): Team = callMethod(FuncEntityGetTeam, () => super.getTeam())
    override def getTeleportDirection(): EnumFacing = callMethod(FuncEntityGetTeleportDirection, () => super.getTeleportDirection())
    override def getUniqueID(): UUID = callMethod(FuncEntityGetUniqueID, () => super.getUniqueID())
    methodLogic.addFinalMethod(FuncEntityGetVectorForRotation, (args: Seq[Any]) => super.getVectorForRotation(args(0).asInstanceOf[Float], args(1).asInstanceOf[Float]))
    override def getYOffset(): Double = callMethod(FuncEntityGetYOffset, () => super.getYOffset())
    override def handleStatusUpdate(id: Byte): Unit = callMethod(FuncEntityHandleStatusUpdate, () => super.handleStatusUpdate(id), id)
    override def handleWaterMovement(): Boolean = callMethod(FuncEntityHandleWaterMovement, () => super.handleWaterMovement())
    override def hasCustomName(): Boolean = callMethod(FuncEntityHasCustomName, () => super.hasCustomName())
    override def hashCode(): Int = callMethod(FuncEntityHashCode, () => super.hashCode())
    override def hitByEntity(entityIn: Entity): Boolean = callMethod(FuncEntityHitByEntity, () => super.hitByEntity(entityIn), entityIn)
    override def ignoreItemEntityData(): Boolean = callMethod(FuncEntityIgnoreItemEntityData, () => super.ignoreItemEntityData())
    override def isBeingRidden(): Boolean = callMethod(FuncEntityIsBeingRidden, () => super.isBeingRidden())
    override def isBurning(): Boolean = callMethod(FuncEntityIsBurning, () => super.isBurning())
    override def isEntityAlive(): Boolean = callMethod(FuncEntityIsEntityAlive, () => super.isEntityAlive())
    override def isEntityEqual(entityIn: Entity): Boolean = callMethod(FuncEntityIsEntityEqual, () => super.isEntityEqual(entityIn), entityIn)
    override def isEntityInsideOpaqueBlock(): Boolean = callMethod(FuncEntityIsEntityInsideOpaqueBlock, () => super.isEntityInsideOpaqueBlock())
    override def isEntityInvulnerable(source: DamageSource): Boolean = callMethod(FuncEntityIsEntityInvulnerable, () => super.isEntityInvulnerable(source), source)
    override def isGlowing(): Boolean = callMethod(FuncEntityIsGlowing, () => super.isGlowing())
    override def isImmuneToExplosions(): Boolean = callMethod(FuncEntityIsImmuneToExplosions, () => super.isImmuneToExplosions())
    methodLogic.addFinalMethod(FuncEntityIsImmuneToFire, (args: Seq[Any]) => super.isImmuneToFire())
    override def isInLava(): Boolean = callMethod(FuncEntityIsInLava, () => super.isInLava())
    override def isInRangeToRender3d(x: Double, y: Double, z: Double): Boolean = callMethod(FuncEntityIsInRangeToRender3d, () => super.isInRangeToRender3d(x, y, z), x, y, z)
    override def isInRangeToRenderDist(distance: Double): Boolean = callMethod(FuncEntityIsInRangeToRenderDist, () => super.isInRangeToRenderDist(distance), distance)
    override def isInWater(): Boolean = callMethod(FuncEntityIsInWater, () => super.isInWater())
    override def isInsideOfMaterial(materialIn: Material): Boolean = callMethod(FuncEntityIsInsideOfMaterial, () => super.isInsideOfMaterial(materialIn), materialIn)
    override def isInvisible(): Boolean = callMethod(FuncEntityIsInvisible, () => super.isInvisible())
    override def isInvisibleToPlayer(player: EntityPlayer): Boolean = callMethod(FuncEntityIsInvisibleToPlayer, () => super.isInvisibleToPlayer(player), player)
    override def isNonBoss(): Boolean = callMethod(FuncEntityIsNonBoss, () => super.isNonBoss())
    override def isOffsetPositionInLiquid(x: Double, y: Double, z: Double): Boolean = callMethod(FuncEntityIsOffsetPositionInLiquid, () => super.isOffsetPositionInLiquid(x, y, z), x, y, z)
    override def isOnSameTeam(entityIn: Entity): Boolean = callMethod(FuncEntityIsOnSameTeam, () => super.isOnSameTeam(entityIn), entityIn)
    override def isOnScoreboardTeam(teamIn: Team): Boolean = callMethod(FuncEntityIsOnScoreboardTeam, () => super.isOnScoreboardTeam(teamIn), teamIn)
    override def isOutsideBorder(): Boolean = callMethod(FuncEntityIsOutsideBorder, () => super.isOutsideBorder())
    override def isPassenger(entityIn: Entity): Boolean = callMethod(FuncEntityIsPassenger, () => super.isPassenger(entityIn), entityIn)
    override def isPushedByWater(): Boolean = callMethod(FuncEntityIsPushedByWater, () => super.isPushedByWater())
    override def isRiding(): Boolean = callMethod(FuncEntityIsRiding, () => super.isRiding())
    override def isRidingOrBeingRiddenBy(entityIn: Entity): Boolean = callMethod(FuncEntityIsRidingOrBeingRiddenBy, () => super.isRidingOrBeingRiddenBy(entityIn), entityIn)
    override def isRidingSameEntity(entityIn: Entity): Boolean = callMethod(FuncEntityIsRidingSameEntity, () => super.isRidingSameEntity(entityIn), entityIn)
    override def isSilent(): Boolean = callMethod(FuncEntityIsSilent, () => super.isSilent())
    override def isSneaking(): Boolean = callMethod(FuncEntityIsSneaking, () => super.isSneaking())
    override def isSpectatedByPlayer(player: EntityPlayerMP): Boolean = callMethod(FuncEntityIsSpectatedByPlayer, () => super.isSpectatedByPlayer(player), player)
    override def isSprinting(): Boolean = callMethod(FuncEntityIsSprinting, () => super.isSprinting())
    override def isWet(): Boolean = callMethod(FuncEntityIsWet, () => super.isWet())
    override def kill(): Unit = callMethod(FuncEntityKill, () => super.kill())
    override def moveEntity(x: Double, y: Double, z: Double): Unit = callMethod(FuncEntityMoveEntity, () => super.moveEntity(x, y, z), x, y, z)
    override def moveFlying(strafe: Float, forward: Float, friction: Float): Unit = callMethod(FuncEntityMoveFlying, () => super.moveFlying(strafe, forward, friction), strafe, forward, friction)
    override def moveToBlockPosAndAngles(pos: BlockPos, rotationYawIn: Float, rotationPitchIn: Float): Unit = callMethod(FuncEntityMoveToBlockPosAndAngles, () => super.moveToBlockPosAndAngles(pos, rotationYawIn, rotationPitchIn), pos, rotationYawIn, rotationPitchIn)
    override def newDoubleNBTList(numbers: Double*): NBTTagList = callMethod(FuncEntityNewDoubleNBTList, () => super.newDoubleNBTList(numbers:_*), numbers)
    override def newFloatNBTList(numbers: Float*): NBTTagList = callMethod(FuncEntityNewFloatNBTList, () => super.newFloatNBTList(numbers:_*), numbers)
    override def notifyDataManagerChange(key: DataParameter[_]): Unit = callMethod(FuncEntityNotifyDataManagerChange, () => super.notifyDataManagerChange(key), key)
    override def onChunkLoad(): Unit = callMethod(FuncEntityOnChunkLoad, () => super.onChunkLoad())
    override def onCollideWithPlayer(entityIn: EntityPlayer): Unit = callMethod(FuncEntityOnCollideWithPlayer, () => super.onCollideWithPlayer(entityIn), entityIn)
    override def onEntityUpdate(): Unit = callMethod(FuncEntityOnEntityUpdate, () => super.onEntityUpdate())
    override def onKillCommand(): Unit = callMethod(FuncEntityOnKillCommand, () => super.onKillCommand())
    override def onKillEntity(entityLivingIn: EntityLivingBase): Unit = callMethod(FuncEntityOnKillEntity, () => super.onKillEntity(entityLivingIn), entityLivingIn)
    override def onStruckByLightning(lightningBolt: EntityLightningBolt): Unit = callMethod(FuncEntityOnStruckByLightning, () => super.onStruckByLightning(lightningBolt), lightningBolt)
    override def onUpdate(): Unit = callMethod(FuncEntityOnUpdate, () => super.onUpdate())
    override def performHurtAnimation(): Unit = callMethod(FuncEntityPerformHurtAnimation, () => super.performHurtAnimation())
    override def playSound(soundIn: SoundEvent, volume: Float, pitch: Float): Unit = callMethod(FuncEntityPlaySound, () => super.playSound(soundIn, volume, pitch), soundIn, volume, pitch)
    override def playStepSound(pos: BlockPos, blockIn: Block): Unit = callMethod(FuncEntityPlayStepSound, () => super.playStepSound(pos, blockIn), pos, blockIn)
    override def preparePlayerToSpawn(): Unit = callMethod(FuncEntityPreparePlayerToSpawn, () => super.preparePlayerToSpawn())
    methodLogic.addFinalMethod(FuncEntityProcessInitialInteract, (args: Seq[Any]) => super.processInitialInteract(args(0).asInstanceOf[EntityPlayer], args(1).asInstanceOf[ItemStack], args(2).asInstanceOf[EnumHand]))
    override def pushOutOfBlocks(x: Double, y: Double, z: Double): Boolean = callMethod(FuncEntityPushOutOfBlocks, () => super.pushOutOfBlocks(x, y, z), x, y, z)
    override def rayTrace(blockReachDistance: Double, partialTicks: Float): RayTraceResult = callMethod(FuncEntityRayTrace, () => super.rayTrace(blockReachDistance, partialTicks), blockReachDistance, partialTicks)
    override def readEntityFromNBT(p0: NBTTagCompound): Unit = callMethod(FuncEntityReadEntityFromNBT, () => super.readEntityFromNBT(p0), p0)
    override def readFromNBT(compound: NBTTagCompound): Unit = callMethod(FuncEntityReadFromNBT, () => super.readFromNBT(compound), compound)
    override def removePassenger(passenger: Entity): Unit = callMethod(FuncEntityRemovePassenger, () => super.removePassenger(passenger), passenger)
    override def removePassengers(): Unit = callMethod(FuncEntityRemovePassengers, () => super.removePassengers())
    override def removeTag(tag: String): Boolean = callMethod(FuncEntityRemoveTag, () => super.removeTag(tag), tag)
    override def removeTrackingPlayer(player: EntityPlayerMP): Unit = callMethod(FuncEntityRemoveTrackingPlayer, () => super.removeTrackingPlayer(player), player)
    override def replaceItemInInventory(inventorySlot: Int, itemStackIn: ItemStack): Boolean = callMethod(FuncEntityReplaceItemInInventory, () => super.replaceItemInInventory(inventorySlot, itemStackIn), inventorySlot, itemStackIn)
    override def resetHeight(): Unit = callMethod(FuncEntityResetHeight, () => super.resetHeight())
    override def resetPositionToBB(): Unit = callMethod(FuncEntityResetPositionToBB, () => super.resetPositionToBB())
    override def sendCommandFeedback(): Boolean = callMethod(FuncEntitySendCommandFeedback, () => super.sendCommandFeedback())
    override def setAir(air: Int): Unit = callMethod(FuncEntitySetAir, () => super.setAir(air), air)
    override def setAlwaysRenderNameTag(alwaysRenderNameTag: Boolean): Unit = callMethod(FuncEntitySetAlwaysRenderNameTag, () => super.setAlwaysRenderNameTag(alwaysRenderNameTag), alwaysRenderNameTag)
    override def setAngles(yaw: Float, pitch: Float): Unit = callMethod(FuncEntitySetAngles, () => super.setAngles(yaw, pitch), yaw, pitch)
    override def setBeenAttacked(): Unit = callMethod(FuncEntitySetBeenAttacked, () => super.setBeenAttacked())
    override def setCommandStat(tpe: CommandResultStats.Type, amount: Int): Unit = callMethod(FuncEntitySetCommandStat, () => super.setCommandStat(tpe, amount), tpe, amount)
    override def setCommandStats(entityIn: Entity): Unit = callMethod(FuncEntitySetCommandStats, () => super.setCommandStats(entityIn), entityIn)
    override def setCustomNameTag(name: String): Unit = callMethod(FuncEntitySetCustomNameTag, () => super.setCustomNameTag(name), name)
    override def setDead(): Unit = callMethod(FuncEntitySetDead, () => super.setDead())
    override def setDropItemsWhenDead(dropWhenDead: Boolean): Unit = callMethod(FuncEntitySetDropItemsWhenDead, () => super.setDropItemsWhenDead(dropWhenDead), dropWhenDead)
    override def setEntityBoundingBox(bb: AxisAlignedBB): Unit = callMethod(FuncEntitySetEntityBoundingBox, () => super.setEntityBoundingBox(bb), bb)
    override def setEntityId(id: Int): Unit = callMethod(FuncEntitySetEntityId, () => super.setEntityId(id), id)
    override def setEntityInvulnerable(isInvulnerable: Boolean): Unit = callMethod(FuncEntitySetEntityInvulnerable, () => super.setEntityInvulnerable(isInvulnerable), isInvulnerable)
    override def setFire(seconds: Int): Unit = callMethod(FuncEntitySetFire, () => super.setFire(seconds), seconds)
    override def setFlag(flag: Int, set: Boolean): Unit = callMethod(FuncEntitySetFlag, () => super.setFlag(flag, set), flag, set)
    override def setGlowing(glowingIn: Boolean): Unit = callMethod(FuncEntitySetGlowing, () => super.setGlowing(glowingIn), glowingIn)
    override def setInWeb(): Unit = callMethod(FuncEntitySetInWeb, () => super.setInWeb())
    override def setInvisible(invisible: Boolean): Unit = callMethod(FuncEntitySetInvisible, () => super.setInvisible(invisible), invisible)
    override def setItemStackToSlot(slotIn: EntityEquipmentSlot, stack: ItemStack): Unit = callMethod(FuncEntitySetItemStackToSlot, () => super.setItemStackToSlot(slotIn, stack), slotIn, stack)
    override def setLocationAndAngles(x: Double, y: Double, z: Double, yaw: Float, pitch: Float): Unit = callMethod(FuncEntitySetLocationAndAngles, () => super.setLocationAndAngles(x, y, z, yaw, pitch), x, y, z, yaw, pitch)
    override def setOnFireFromLava(): Unit = callMethod(FuncEntitySetOnFireFromLava, () => super.setOnFireFromLava())
    override def setOutsideBorder(outsideBorder: Boolean): Unit = callMethod(FuncEntitySetOutsideBorder, () => super.setOutsideBorder(outsideBorder), outsideBorder)
    override def setPortal(pos: BlockPos): Unit = callMethod(FuncEntitySetPortal, () => super.setPortal(pos), pos)
    override def setPosition(x: Double, y: Double, z: Double): Unit = callMethod(FuncEntitySetPosition, () => super.setPosition(x, y, z), x, y, z)
    override def setPositionAndRotation(x: Double, y: Double, z: Double, yaw: Float, pitch: Float): Unit = callMethod(FuncEntitySetPositionAndRotation, () => super.setPositionAndRotation(x, y, z, yaw, pitch), x, y, z, yaw, pitch)
    override def setPositionAndRotation2(x: Double, y: Double, z: Double, yaw: Float, pitch: Float, posRotationIncrements: Int, teleport: Boolean): Unit = callMethod(FuncEntitySetPositionAndRotation2, () => super.setPositionAndRotation2(x, y, z, yaw, pitch, posRotationIncrements, teleport), x, y, z, yaw, pitch, posRotationIncrements, teleport)
    override def setPositionAndUpdate(x: Double, y: Double, z: Double): Unit = callMethod(FuncEntitySetPositionAndUpdate, () => super.setPositionAndUpdate(x, y, z), x, y, z)
    override def setPositionNonDirty(): Boolean = callMethod(FuncEntitySetPositionNonDirty, () => super.setPositionNonDirty())
    override def setRenderYawOffset(offset: Float): Unit = callMethod(FuncEntitySetRenderYawOffset, () => super.setRenderYawOffset(offset), offset)
    override def setRotation(yaw: Float, pitch: Float): Unit = callMethod(FuncEntitySetRotation, () => super.setRotation(yaw, pitch), yaw, pitch)
    override def setRotationYawHead(rotation: Float): Unit = callMethod(FuncEntitySetRotationYawHead, () => super.setRotationYawHead(rotation), rotation)
    override def setSilent(isSilent: Boolean): Unit = callMethod(FuncEntitySetSilent, () => super.setSilent(isSilent), isSilent)
    override def setSize(width: Float, height: Float): Unit = callMethod(FuncEntitySetSize, () => super.setSize(width, height), width, height)
    override def setSneaking(sneaking: Boolean): Unit = callMethod(FuncEntitySetSneaking, () => super.setSneaking(sneaking), sneaking)
    override def setSprinting(sprinting: Boolean): Unit = callMethod(FuncEntitySetSprinting, () => super.setSprinting(sprinting), sprinting)
    override def setUniqueId(uniqueIdIn: UUID): Unit = callMethod(FuncEntitySetUniqueId, () => super.setUniqueId(uniqueIdIn), uniqueIdIn)
    override def setVelocity(x: Double, y: Double, z: Double): Unit = callMethod(FuncEntitySetVelocity, () => super.setVelocity(x, y, z), x, y, z)
    override def setWorld(worldIn: World): Unit = callMethod(FuncEntitySetWorld, () => super.setWorld(worldIn), worldIn)
    override def shouldSetPosAfterLoading(): Boolean = callMethod(FuncEntityShouldSetPosAfterLoading, () => super.shouldSetPosAfterLoading())
    override def spawnRunningParticles(): Unit = callMethod(FuncEntitySpawnRunningParticles, () => super.spawnRunningParticles())
    override def startRiding(entityIn: Entity): Boolean = callMethod(FuncEntityStartRiding_0, () => super.startRiding(entityIn), entityIn)
    override def startRiding(entityIn: Entity, force: Boolean): Boolean = callMethod(FuncEntityStartRiding_1, () => super.startRiding(entityIn, force), entityIn, force)
    override def toString(): String = callMethod(FuncEntityToString, () => super.toString())
    override def updateFallState(y: Double, onGroundIn: Boolean, state: IBlockState, pos: BlockPos): Unit = callMethod(FuncEntityUpdateFallState, () => super.updateFallState(y, onGroundIn, state, pos), y, onGroundIn, state, pos)
    override def updatePassenger(passenger: Entity): Unit = callMethod(FuncEntityUpdatePassenger, () => super.updatePassenger(passenger), passenger)
    override def updateRidden(): Unit = callMethod(FuncEntityUpdateRidden, () => super.updateRidden())
    override def verifyExplosion(explosionIn: Explosion, worldIn: World, pos: BlockPos, blockStateIn: IBlockState, p_174816_5_ : Float): Boolean = callMethod(FuncEntityVerifyExplosion, () => super.verifyExplosion(explosionIn, worldIn, pos, blockStateIn, p_174816_5_), explosionIn, worldIn, pos, blockStateIn, p_174816_5_)
    override def writeEntityToNBT(p0: NBTTagCompound): Unit = callMethod(FuncEntityWriteEntityToNBT, () => super.writeEntityToNBT(p0), p0)
    override def writeToNBT(compound: NBTTagCompound): Unit = callMethod(FuncEntityWriteToNBT, () => super.writeToNBT(compound), compound)
    override def writeToNBTAtomically(compound: NBTTagCompound): Boolean = callMethod(FuncEntityWriteToNBTAtomically, () => super.writeToNBTAtomically(compound), compound)
    override def writeToNBTOptional(compound: NBTTagCompound): Boolean = callMethod(FuncEntityWriteToNBTOptional, () => super.writeToNBTOptional(compound), compound)
    override def canAttackClass(cls: Class[_ <: EntityLivingBase]): Boolean = callMethod(FuncEntityLivingCanAttackClass, () => super.canAttackClass(cls), cls)
    override def canBeLeashedTo(player: EntityPlayer): Boolean = callMethod(FuncEntityLivingCanBeLeashedTo, () => super.canBeLeashedTo(player), player)
    override def canBeSteered(): Boolean = callMethod(FuncEntityLivingCanBeSteered, () => super.canBeSteered())
    override def canDespawn(): Boolean = callMethod(FuncEntityLivingCanDespawn, () => super.canDespawn())
    override def canEquipItem(stack: ItemStack): Boolean = callMethod(FuncEntityLivingCanEquipItem, () => super.canEquipItem(stack), stack)
    override def canPickUpLoot(): Boolean = callMethod(FuncEntityLivingCanPickUpLoot, () => super.canPickUpLoot())
    override def clearLeashed(sendPacket: Boolean, dropLead: Boolean): Unit = callMethod(FuncEntityLivingClearLeashed, () => super.clearLeashed(sendPacket, dropLead), sendPacket, dropLead)
    override def createBodyHelper(): EntityBodyHelper = callMethod(FuncEntityLivingCreateBodyHelper, () => super.createBodyHelper())
    override def despawnEntity(): Unit = callMethod(FuncEntityLivingDespawnEntity, () => super.despawnEntity())
    override def eatGrassBonus(): Unit = callMethod(FuncEntityLivingEatGrassBonus, () => super.eatGrassBonus())
    override def enablePersistence(): Unit = callMethod(FuncEntityLivingEnablePersistence, () => super.enablePersistence())
    override def faceEntity(entityIn: Entity, maxYawIncrease: Float, maxPitchIncrease: Float): Unit = callMethod(FuncEntityLivingFaceEntity, () => super.faceEntity(entityIn, maxYawIncrease, maxPitchIncrease), entityIn, maxYawIncrease, maxPitchIncrease)
    override def getAmbientSound(): SoundEvent = callMethod(FuncEntityLivingGetAmbientSound, () => super.getAmbientSound())
    override def getAttackTarget(): EntityLivingBase = callMethod(FuncEntityLivingGetAttackTarget, () => super.getAttackTarget())
    override def getCanSpawnHere(): Boolean = callMethod(FuncEntityLivingGetCanSpawnHere, () => super.getCanSpawnHere())
    override def getDropItem(): Item = callMethod(FuncEntityLivingGetDropItem, () => super.getDropItem())
    override def getEntitySenses(): EntitySenses = callMethod(FuncEntityLivingGetEntitySenses, () => super.getEntitySenses())
    override def getHorizontalFaceSpeed(): Int = callMethod(FuncEntityLivingGetHorizontalFaceSpeed, () => super.getHorizontalFaceSpeed())
    override def getJumpHelper(): EntityJumpHelper = callMethod(FuncEntityLivingGetJumpHelper, () => super.getJumpHelper())
    override def getLeashed(): Boolean = callMethod(FuncEntityLivingGetLeashed, () => super.getLeashed())
    override def getLeashedToEntity(): Entity = callMethod(FuncEntityLivingGetLeashedToEntity, () => super.getLeashedToEntity())
    override def getLookHelper(): EntityLookHelper = callMethod(FuncEntityLivingGetLookHelper, () => super.getLookHelper())
    override def getLootTable(): ResourceLocation = callMethod(FuncEntityLivingGetLootTable, () => super.getLootTable())
    override def getMaxSpawnedInChunk(): Int = callMethod(FuncEntityLivingGetMaxSpawnedInChunk, () => super.getMaxSpawnedInChunk())
    override def getMoveHelper(): EntityMoveHelper = callMethod(FuncEntityLivingGetMoveHelper, () => super.getMoveHelper())
    override def getNavigator(): PathNavigate = callMethod(FuncEntityLivingGetNavigator, () => super.getNavigator())
    override def getNewNavigator(worldIn: World): PathNavigate = callMethod(FuncEntityLivingGetNewNavigator, () => super.getNewNavigator(worldIn), worldIn)
    override def getPathPriority(nodeType: PathNodeType): Float = callMethod(FuncEntityLivingGetPathPriority, () => super.getPathPriority(nodeType), nodeType)
    override def getRenderSizeModifier(): Float = callMethod(FuncEntityLivingGetRenderSizeModifier, () => super.getRenderSizeModifier())
    override def getTalkInterval(): Int = callMethod(FuncEntityLivingGetTalkInterval, () => super.getTalkInterval())
    override def getVerticalFaceSpeed(): Int = callMethod(FuncEntityLivingGetVerticalFaceSpeed, () => super.getVerticalFaceSpeed())
    override def initEntityAI(): Unit = callMethod(FuncEntityLivingInitEntityAI, () => super.initEntityAI())
    override def isAIDisabled(): Boolean = callMethod(FuncEntityLivingIsAIDisabled, () => super.isAIDisabled())
    override def isLeftHanded(): Boolean = callMethod(FuncEntityLivingIsLeftHanded, () => super.isLeftHanded())
    override def isNoDespawnRequired(): Boolean = callMethod(FuncEntityLivingIsNoDespawnRequired, () => super.isNoDespawnRequired())
    override def isNotColliding(): Boolean = callMethod(FuncEntityLivingIsNotColliding, () => super.isNotColliding())
    override def onInitialSpawn(difficulty: DifficultyInstance, livingdata: IEntityLivingData): IEntityLivingData = callMethod(FuncEntityLivingOnInitialSpawn, () => super.onInitialSpawn(difficulty, livingdata), difficulty, livingdata)
    override def playLivingSound(): Unit = callMethod(FuncEntityLivingPlayLivingSound, () => super.playLivingSound())
    override def processInteract(player: EntityPlayer, hand: EnumHand, stack: ItemStack): Boolean = callMethod(FuncEntityLivingProcessInteract, () => super.processInteract(player, hand, stack), player, hand, stack)
    override def setAttackTarget(entitylivingbaseIn: EntityLivingBase): Unit = callMethod(FuncEntityLivingSetAttackTarget, () => super.setAttackTarget(entitylivingbaseIn), entitylivingbaseIn)
    override def setCanPickUpLoot(canPickup: Boolean): Unit = callMethod(FuncEntityLivingSetCanPickUpLoot, () => super.setCanPickUpLoot(canPickup), canPickup)
    override def setDropChance(slotIn: EntityEquipmentSlot, chance: Float): Unit = callMethod(FuncEntityLivingSetDropChance, () => super.setDropChance(slotIn, chance), slotIn, chance)
    override def setEnchantmentBasedOnDifficulty(difficulty: DifficultyInstance): Unit = callMethod(FuncEntityLivingSetEnchantmentBasedOnDifficulty, () => super.setEnchantmentBasedOnDifficulty(difficulty), difficulty)
    override def setEquipmentBasedOnDifficulty(difficulty: DifficultyInstance): Unit = callMethod(FuncEntityLivingSetEquipmentBasedOnDifficulty, () => super.setEquipmentBasedOnDifficulty(difficulty), difficulty)
    override def setLeashedToEntity(entityIn: Entity, sendAttachNotification: Boolean): Unit = callMethod(FuncEntityLivingSetLeashedToEntity, () => super.setLeashedToEntity(entityIn, sendAttachNotification), entityIn, sendAttachNotification)
    override def setLeftHanded(disable: Boolean): Unit = callMethod(FuncEntityLivingSetLeftHanded, () => super.setLeftHanded(disable), disable)
    override def setMoveForward(amount: Float): Unit = callMethod(FuncEntityLivingSetMoveForward, () => super.setMoveForward(amount), amount)
    override def setMoveStrafing(amount: Float): Unit = callMethod(FuncEntityLivingSetMoveStrafing, () => super.setMoveStrafing(amount), amount)
    override def setNoAI(disable: Boolean): Unit = callMethod(FuncEntityLivingSetNoAI, () => super.setNoAI(disable), disable)
    override def setPathPriority(nodeType: PathNodeType, priority: Float): Unit = callMethod(FuncEntityLivingSetPathPriority, () => super.setPathPriority(nodeType, priority), nodeType, priority)
    override def spawnExplosionParticle(): Unit = callMethod(FuncEntityLivingSpawnExplosionParticle, () => super.spawnExplosionParticle())
    override def updateAITasks(): Unit = callMethod(FuncEntityLivingUpdateAITasks, () => super.updateAITasks())
    override def updateEquipmentIfNeeded(itemEntity: EntityItem): Unit = callMethod(FuncEntityLivingUpdateEquipmentIfNeeded, () => super.updateEquipmentIfNeeded(itemEntity), itemEntity)
    override def updateLeashedState(): Unit = callMethod(FuncEntityLivingUpdateLeashedState, () => super.updateLeashedState())
    override def addPotionEffect(potioneffectIn: PotionEffect): Unit = callMethod(FuncEntityLivingBaseAddPotionEffect, () => super.addPotionEffect(potioneffectIn), potioneffectIn)
    override def applyArmorCalculations(source: DamageSource, damage: Float): Float = callMethod(FuncEntityLivingBaseApplyArmorCalculations, () => super.applyArmorCalculations(source, damage), source, damage)
    override def applyEntityAttributes(): Unit = callMethod(FuncEntityLivingBaseApplyEntityAttributes, () => super.applyEntityAttributes())
    override def applyPotionDamageCalculations(source: DamageSource, damage: Float): Float = callMethod(FuncEntityLivingBaseApplyPotionDamageCalculations, () => super.applyPotionDamageCalculations(source, damage), source, damage)
    override def attackEntityAsMob(entityIn: Entity): Boolean = callMethod(FuncEntityLivingBaseAttackEntityAsMob, () => super.attackEntityAsMob(entityIn), entityIn)
    override def canBeHitWithPotion(): Boolean = callMethod(FuncEntityLivingBaseCanBeHitWithPotion, () => super.canBeHitWithPotion())
    override def canBreatheUnderwater(): Boolean = callMethod(FuncEntityLivingBaseCanBreatheUnderwater, () => super.canBreatheUnderwater())
    override def canDropLoot(): Boolean = callMethod(FuncEntityLivingBaseCanDropLoot, () => super.canDropLoot())
    override def canEntityBeSeen(entityIn: Entity): Boolean = callMethod(FuncEntityLivingBaseCanEntityBeSeen, () => super.canEntityBeSeen(entityIn), entityIn)
    override def clearActivePotions(): Unit = callMethod(FuncEntityLivingBaseClearActivePotions, () => super.clearActivePotions())
    override def collideWithEntity(entityIn: Entity): Unit = callMethod(FuncEntityLivingBaseCollideWithEntity, () => super.collideWithEntity(entityIn), entityIn)
    override def collideWithNearbyEntities(): Unit = callMethod(FuncEntityLivingBaseCollideWithNearbyEntities, () => super.collideWithNearbyEntities())
    override def damageArmor(damage: Float): Unit = callMethod(FuncEntityLivingBaseDamageArmor, () => super.damageArmor(damage), damage)
    override def damageEntity(damageSrc: DamageSource, damageAmount: Float): Unit = callMethod(FuncEntityLivingBaseDamageEntity, () => super.damageEntity(damageSrc, damageAmount), damageSrc, damageAmount)
    override def damageShield(damage: Float): Unit = callMethod(FuncEntityLivingBaseDamageShield, () => super.damageShield(damage), damage)
    override def decreaseAirSupply(air: Int): Int = callMethod(FuncEntityLivingBaseDecreaseAirSupply, () => super.decreaseAirSupply(air), air)
    override def dismountEntity(entityIn: Entity): Unit = callMethod(FuncEntityLivingBaseDismountEntity, () => super.dismountEntity(entityIn), entityIn)
    override def dropEquipment(wasRecentlyHit: Boolean, lootingModifier: Int): Unit = callMethod(FuncEntityLivingBaseDropEquipment, () => super.dropEquipment(wasRecentlyHit, lootingModifier), wasRecentlyHit, lootingModifier)
    override def dropFewItems(wasRecentlyHit: Boolean, lootingModifier: Int): Unit = callMethod(FuncEntityLivingBaseDropFewItems, () => super.dropFewItems(wasRecentlyHit, lootingModifier), wasRecentlyHit, lootingModifier)
    override def dropLoot(wasRecentlyHit: Boolean, lootingModifier: Int, source: DamageSource): Unit = callMethod(FuncEntityLivingBaseDropLoot, () => super.dropLoot(wasRecentlyHit, lootingModifier, source), wasRecentlyHit, lootingModifier, source)
    override def frostWalk(pos: BlockPos): Unit = callMethod(FuncEntityLivingBaseFrostWalk, () => super.frostWalk(pos), pos)
    override def getAIMoveSpeed(): Float = callMethod(FuncEntityLivingBaseGetAIMoveSpeed, () => super.getAIMoveSpeed())
    override def getAITarget(): EntityLivingBase = callMethod(FuncEntityLivingBaseGetAITarget, () => super.getAITarget())
    override def getAbsorptionAmount(): Float = callMethod(FuncEntityLivingBaseGetAbsorptionAmount, () => super.getAbsorptionAmount())
    override def getActiveHand(): EnumHand = callMethod(FuncEntityLivingBaseGetActiveHand, () => super.getActiveHand())
    override def getActiveItemStack(): ItemStack = callMethod(FuncEntityLivingBaseGetActiveItemStack, () => super.getActiveItemStack())
    override def getActivePotionEffect(potionIn: Potion): PotionEffect = callMethod(FuncEntityLivingBaseGetActivePotionEffect, () => super.getActivePotionEffect(potionIn), potionIn)
    override def getActivePotionEffects(): util.Collection[PotionEffect] = callMethod(FuncEntityLivingBaseGetActivePotionEffects, () => super.getActivePotionEffects())
    override def getAge(): Int = callMethod(FuncEntityLivingBaseGetAge, () => super.getAge())
    methodLogic.addFinalMethod(FuncEntityLivingBaseGetArrowCountInEntity, (args: Seq[Any]) => super.getArrowCountInEntity())
    override def getAttackingEntity(): EntityLivingBase = callMethod(FuncEntityLivingBaseGetAttackingEntity, () => super.getAttackingEntity())
    override def getAttributeMap(): AbstractAttributeMap = callMethod(FuncEntityLivingBaseGetAttributeMap, () => super.getAttributeMap())
    override def getCombatTracker(): CombatTracker = callMethod(FuncEntityLivingBaseGetCombatTracker, () => super.getCombatTracker())
    override def getCreatureAttribute(): EnumCreatureAttribute = callMethod(FuncEntityLivingBaseGetCreatureAttribute, () => super.getCreatureAttribute())
    override def getDeathSound(): SoundEvent = callMethod(FuncEntityLivingBaseGetDeathSound, () => super.getDeathSound())
    override def getEntityAttribute(attribute: IAttribute): IAttributeInstance = callMethod(FuncEntityLivingBaseGetEntityAttribute, () => super.getEntityAttribute(attribute), attribute)
    override def getExperiencePoints(player: EntityPlayer): Int = callMethod(FuncEntityLivingBaseGetExperiencePoints, () => super.getExperiencePoints(player), player)
    override def getFallSound(heightIn: Int): SoundEvent = callMethod(FuncEntityLivingBaseGetFallSound, () => super.getFallSound(heightIn), heightIn)
    methodLogic.addFinalMethod(FuncEntityLivingBaseGetHealth, (args: Seq[Any]) => super.getHealth())
    override def getHeldItem(hand: EnumHand): ItemStack = callMethod(FuncEntityLivingBaseGetHeldItem, () => super.getHeldItem(hand), hand)
    override def getHeldItemMainhand(): ItemStack = callMethod(FuncEntityLivingBaseGetHeldItemMainhand, () => super.getHeldItemMainhand())
    override def getHeldItemOffhand(): ItemStack = callMethod(FuncEntityLivingBaseGetHeldItemOffhand, () => super.getHeldItemOffhand())
    override def getHurtSound(): SoundEvent = callMethod(FuncEntityLivingBaseGetHurtSound, () => super.getHurtSound())
    override def getItemInUseCount(): Int = callMethod(FuncEntityLivingBaseGetItemInUseCount, () => super.getItemInUseCount())
    override def getItemInUseMaxCount(): Int = callMethod(FuncEntityLivingBaseGetItemInUseMaxCount, () => super.getItemInUseMaxCount())
    override def getItemStackFromSlot(p0: EntityEquipmentSlot): ItemStack = callMethod(FuncEntityLivingBaseGetItemStackFromSlot, () => super.getItemStackFromSlot(p0), p0)
    override def getJumpUpwardsMotion(): Float = callMethod(FuncEntityLivingBaseGetJumpUpwardsMotion, () => super.getJumpUpwardsMotion())
    override def getLastAttacker(): EntityLivingBase = callMethod(FuncEntityLivingBaseGetLastAttacker, () => super.getLastAttacker())
    override def getLastAttackerTime(): Int = callMethod(FuncEntityLivingBaseGetLastAttackerTime, () => super.getLastAttackerTime())
    methodLogic.addFinalMethod(FuncEntityLivingBaseGetMaxHealth, (args: Seq[Any]) => super.getMaxHealth())
    override def getPrimaryHand(): EnumHandSide = callMethod(FuncEntityLivingBaseGetPrimaryHand, () => super.getPrimaryHand())
    override def getRNG(): Random = callMethod(FuncEntityLivingBaseGetRNG, () => super.getRNG())
    override def getRevengeTimer(): Int = callMethod(FuncEntityLivingBaseGetRevengeTimer, () => super.getRevengeTimer())
    override def getSoundPitch(): Float = callMethod(FuncEntityLivingBaseGetSoundPitch, () => super.getSoundPitch())
    override def getSoundVolume(): Float = callMethod(FuncEntityLivingBaseGetSoundVolume, () => super.getSoundVolume())
    override def getSwingProgress(partialTickTime: Float): Float = callMethod(FuncEntityLivingBaseGetSwingProgress, () => super.getSwingProgress(partialTickTime), partialTickTime)
    override def getTicksElytraFlying(): Int = callMethod(FuncEntityLivingBaseGetTicksElytraFlying, () => super.getTicksElytraFlying())
    override def getTotalArmorValue(): Int = callMethod(FuncEntityLivingBaseGetTotalArmorValue, () => super.getTotalArmorValue())
    override def handleJumpLava(): Unit = callMethod(FuncEntityLivingBaseHandleJumpLava, () => super.handleJumpLava())
    override def heal(healAmount: Float): Unit = callMethod(FuncEntityLivingBaseHeal, () => super.heal(healAmount), healAmount)
    override def isActiveItemStackBlocking(): Boolean = callMethod(FuncEntityLivingBaseIsActiveItemStackBlocking, () => super.isActiveItemStackBlocking())
    override def isChild(): Boolean = callMethod(FuncEntityLivingBaseIsChild, () => super.isChild())
    override def isElytraFlying(): Boolean = callMethod(FuncEntityLivingBaseIsElytraFlying, () => super.isElytraFlying())
    override def isEntityUndead(): Boolean = callMethod(FuncEntityLivingBaseIsEntityUndead, () => super.isEntityUndead())
    override def isHandActive(): Boolean = callMethod(FuncEntityLivingBaseIsHandActive, () => super.isHandActive())
    override def isMovementBlocked(): Boolean = callMethod(FuncEntityLivingBaseIsMovementBlocked, () => super.isMovementBlocked())
    override def isOnLadder(): Boolean = callMethod(FuncEntityLivingBaseIsOnLadder, () => super.isOnLadder())
    override def isPlayer(): Boolean = callMethod(FuncEntityLivingBaseIsPlayer, () => super.isPlayer())
    override def isPlayerSleeping(): Boolean = callMethod(FuncEntityLivingBaseIsPlayerSleeping, () => super.isPlayerSleeping())
    override def isPotionActive(potionIn: Potion): Boolean = callMethod(FuncEntityLivingBaseIsPotionActive, () => super.isPotionActive(potionIn), potionIn)
    override def isPotionApplicable(potioneffectIn: PotionEffect): Boolean = callMethod(FuncEntityLivingBaseIsPotionApplicable, () => super.isPotionApplicable(potioneffectIn), potioneffectIn)
    override def isServerWorld(): Boolean = callMethod(FuncEntityLivingBaseIsServerWorld, () => super.isServerWorld())
    override def jump(): Unit = callMethod(FuncEntityLivingBaseJump, () => super.jump())
    override def knockBack(entityIn: Entity, strenght: Float, xRatio: Double, zRatio: Double): Unit = callMethod(FuncEntityLivingBaseKnockBack, () => super.knockBack(entityIn, strenght, xRatio, zRatio), entityIn, strenght, xRatio, zRatio)
    override def markPotionsDirty(): Unit = callMethod(FuncEntityLivingBaseMarkPotionsDirty, () => super.markPotionsDirty())
    override def moveEntityWithHeading(strafe: Float, forward: Float): Unit = callMethod(FuncEntityLivingBaseMoveEntityWithHeading, () => super.moveEntityWithHeading(strafe, forward), strafe, forward)
    override def onChangedPotionEffect(id: PotionEffect, p_70695_2_ : Boolean): Unit = callMethod(FuncEntityLivingBaseOnChangedPotionEffect, () => super.onChangedPotionEffect(id, p_70695_2_), id, p_70695_2_)
    override def onDeath(cause: DamageSource): Unit = callMethod(FuncEntityLivingBaseOnDeath, () => super.onDeath(cause), cause)
    override def onDeathUpdate(): Unit = callMethod(FuncEntityLivingBaseOnDeathUpdate, () => super.onDeathUpdate())
    override def onFinishedPotionEffect(effect: PotionEffect): Unit = callMethod(FuncEntityLivingBaseOnFinishedPotionEffect, () => super.onFinishedPotionEffect(effect), effect)
    override def onItemPickup(entityIn: Entity, quantity: Int): Unit = callMethod(FuncEntityLivingBaseOnItemPickup, () => super.onItemPickup(entityIn, quantity), entityIn, quantity)
    override def onItemUseFinish(): Unit = callMethod(FuncEntityLivingBaseOnItemUseFinish, () => super.onItemUseFinish())
    override def onLivingUpdate(): Unit = callMethod(FuncEntityLivingBaseOnLivingUpdate, () => super.onLivingUpdate())
    override def onNewPotionEffect(id: PotionEffect): Unit = callMethod(FuncEntityLivingBaseOnNewPotionEffect, () => super.onNewPotionEffect(id), id)
    override def playEquipSound(stack: ItemStack): Unit = callMethod(FuncEntityLivingBasePlayEquipSound, () => super.playEquipSound(stack), stack)
    override def playHurtSound(source: DamageSource): Unit = callMethod(FuncEntityLivingBasePlayHurtSound, () => super.playHurtSound(source), source)
    override def removeActivePotionEffect(potioneffectin: Potion): PotionEffect = callMethod(FuncEntityLivingBaseRemoveActivePotionEffect, () => super.removeActivePotionEffect(potioneffectin), potioneffectin)
    override def removePotionEffect(potionIn: Potion): Unit = callMethod(FuncEntityLivingBaseRemovePotionEffect, () => super.removePotionEffect(potionIn), potionIn)
    override def renderBrokenItemStack(stack: ItemStack): Unit = callMethod(FuncEntityLivingBaseRenderBrokenItemStack, () => super.renderBrokenItemStack(stack), stack)
    override def resetActiveHand(): Unit = callMethod(FuncEntityLivingBaseResetActiveHand, () => super.resetActiveHand())
    override def resetPotionEffectMetadata(): Unit = callMethod(FuncEntityLivingBaseResetPotionEffectMetadata, () => super.resetPotionEffectMetadata())
    override def sendEndCombat(): Unit = callMethod(FuncEntityLivingBaseSendEndCombat, () => super.sendEndCombat())
    override def sendEnterCombat(): Unit = callMethod(FuncEntityLivingBaseSendEnterCombat, () => super.sendEnterCombat())
    override def setAIMoveSpeed(speedIn: Float): Unit = callMethod(FuncEntityLivingBaseSetAIMoveSpeed, () => super.setAIMoveSpeed(speedIn), speedIn)
    override def setAbsorptionAmount(amount: Float): Unit = callMethod(FuncEntityLivingBaseSetAbsorptionAmount, () => super.setAbsorptionAmount(amount), amount)
    override def setActiveHand(hand: EnumHand): Unit = callMethod(FuncEntityLivingBaseSetActiveHand, () => super.setActiveHand(hand), hand)
    methodLogic.addFinalMethod(FuncEntityLivingBaseSetArrowCountInEntity, (args: Seq[Any]) => super.setArrowCountInEntity(args(0).asInstanceOf[Int]))
    override def setHealth(health: Float): Unit = callMethod(FuncEntityLivingBaseSetHealth, () => super.setHealth(health), health)
    override def setHeldItem(hand: EnumHand, stack: ItemStack): Unit = callMethod(FuncEntityLivingBaseSetHeldItem, () => super.setHeldItem(hand, stack), hand, stack)
    override def setJumping(jumping: Boolean): Unit = callMethod(FuncEntityLivingBaseSetJumping, () => super.setJumping(jumping), jumping)
    override def setLastAttacker(entityIn: Entity): Unit = callMethod(FuncEntityLivingBaseSetLastAttacker, () => super.setLastAttacker(entityIn), entityIn)
    override def setRevengeTarget(livingBase: EntityLivingBase): Unit = callMethod(FuncEntityLivingBaseSetRevengeTarget, () => super.setRevengeTarget(livingBase), livingBase)
    override def stopActiveHand(): Unit = callMethod(FuncEntityLivingBaseStopActiveHand, () => super.stopActiveHand())
    override def swingArm(hand: EnumHand): Unit = callMethod(FuncEntityLivingBaseSwingArm, () => super.swingArm(hand), hand)
    override def teleportTo_(x: Double, y: Double, z: Double): Boolean = callMethod(FuncEntityLivingBaseTeleportTo_, () => super.teleportTo_(x, y, z), x, y, z)
    override def updateAITick(): Unit = callMethod(FuncEntityLivingBaseUpdateAITick, () => super.updateAITick())
    override def updateActiveHand(): Unit = callMethod(FuncEntityLivingBaseUpdateActiveHand, () => super.updateActiveHand())
    override def updateArmSwingProgress(): Unit = callMethod(FuncEntityLivingBaseUpdateArmSwingProgress, () => super.updateArmSwingProgress())
    override def updateDistance(p_110146_1_ : Float, p_110146_2_ : Float): Float = callMethod(FuncEntityLivingBaseUpdateDistance, () => super.updateDistance(p_110146_1_, p_110146_2_), p_110146_1_, p_110146_2_)
    methodLogic.addFinalMethod(FuncEntityLivingBaseUpdateEntityActionState, (args: Seq[Any]) => super.updateEntityActionState())
    override def updateItemUse(stack: ItemStack, eatingParticleCount: Int): Unit = callMethod(FuncEntityLivingBaseUpdateItemUse, () => super.updateItemUse(stack, eatingParticleCount), stack, eatingParticleCount)
    override def updatePotionEffects(): Unit = callMethod(FuncEntityLivingBaseUpdatePotionEffects, () => super.updatePotionEffects())
    override def updatePotionMetadata(): Unit = callMethod(FuncEntityLivingBaseUpdatePotionMetadata, () => super.updatePotionMetadata())
}
